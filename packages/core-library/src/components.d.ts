/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UIIcon } from "./components/ui-icon/ui-icon";
import { IconName } from "./components/ui-icon/icons";
export { UIIcon } from "./components/ui-icon/ui-icon";
export { IconName } from "./components/ui-icon/icons";
export namespace Components {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled": boolean;
        /**
          * The name of the icon to render inside the button on the left side. If provided, the button will render an `ui-icon` icon.
         */
        "iconName"?: UIIcon['name'];
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiIcon {
        /**
          * The name of the icon to render.
         */
        "name": IconName;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiTooltip {
        /**
          * The text to display in the tooltip. This text will be shown when the user hovers over the component.
          * @example <ui-tooltip text="This is a tooltip!"></ui-tooltip>
         */
        "text": string;
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6'.
          * @default 'h1'
         */
        "variant": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface UiXstack {
    }
    interface UiYstack {
    }
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiLogoElement extends Components.UiLogo, HTMLStencilElement {
    }
    var HTMLUiLogoElement: {
        prototype: HTMLUiLogoElement;
        new (): HTMLUiLogoElement;
    };
    interface HTMLUiTooltipElement extends Components.UiTooltip, HTMLStencilElement {
    }
    var HTMLUiTooltipElement: {
        prototype: HTMLUiTooltipElement;
        new (): HTMLUiTooltipElement;
    };
    interface HTMLUiTypographyElement extends Components.UiTypography, HTMLStencilElement {
    }
    var HTMLUiTypographyElement: {
        prototype: HTMLUiTypographyElement;
        new (): HTMLUiTypographyElement;
    };
    interface HTMLUiXstackElement extends Components.UiXstack, HTMLStencilElement {
    }
    var HTMLUiXstackElement: {
        prototype: HTMLUiXstackElement;
        new (): HTMLUiXstackElement;
    };
    interface HTMLUiYstackElement extends Components.UiYstack, HTMLStencilElement {
    }
    var HTMLUiYstackElement: {
        prototype: HTMLUiYstackElement;
        new (): HTMLUiYstackElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-icon": HTMLUiIconElement;
        "ui-logo": HTMLUiLogoElement;
        "ui-tooltip": HTMLUiTooltipElement;
        "ui-typography": HTMLUiTypographyElement;
        "ui-xstack": HTMLUiXstackElement;
        "ui-ystack": HTMLUiYstackElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to render inside the button on the left side. If provided, the button will render an `ui-icon` icon.
         */
        "iconName"?: UIIcon['name'];
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiIcon {
        /**
          * The name of the icon to render.
         */
        "name": IconName;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiTooltip {
        /**
          * The text to display in the tooltip. This text will be shown when the user hovers over the component.
          * @example <ui-tooltip text="This is a tooltip!"></ui-tooltip>
         */
        "text": string;
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6'.
          * @default 'h1'
         */
        "variant"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface UiXstack {
    }
    interface UiYstack {
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-icon": UiIcon;
        "ui-logo": UiLogo;
        "ui-tooltip": UiTooltip;
        "ui-typography": UiTypography;
        "ui-xstack": UiXstack;
        "ui-ystack": UiYstack;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-logo": LocalJSX.UiLogo & JSXBase.HTMLAttributes<HTMLUiLogoElement>;
            "ui-tooltip": LocalJSX.UiTooltip & JSXBase.HTMLAttributes<HTMLUiTooltipElement>;
            "ui-typography": LocalJSX.UiTypography & JSXBase.HTMLAttributes<HTMLUiTypographyElement>;
            "ui-xstack": LocalJSX.UiXstack & JSXBase.HTMLAttributes<HTMLUiXstackElement>;
            "ui-ystack": LocalJSX.UiYstack & JSXBase.HTMLAttributes<HTMLUiYstackElement>;
        }
    }
}
