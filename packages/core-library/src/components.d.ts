/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled": boolean;
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiIcon {
        /**
          * The name of the icon to display. This should match the name used in Material Symbols. Available Icon Names can be found here:  https://fonts.google.com/icons
          * @example <ui-icon name="home"></ui-icon> <ui-icon name="settings"></ui-icon>
         */
        "name": string;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6'.
          * @default 'h1'
         */
        "variant": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiLogoElement extends Components.UiLogo, HTMLStencilElement {
    }
    var HTMLUiLogoElement: {
        prototype: HTMLUiLogoElement;
        new (): HTMLUiLogoElement;
    };
    interface HTMLUiTypographyElement extends Components.UiTypography, HTMLStencilElement {
    }
    var HTMLUiTypographyElement: {
        prototype: HTMLUiTypographyElement;
        new (): HTMLUiTypographyElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-icon": HTMLUiIconElement;
        "ui-logo": HTMLUiLogoElement;
        "ui-typography": HTMLUiTypographyElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiIcon {
        /**
          * The name of the icon to display. This should match the name used in Material Symbols. Available Icon Names can be found here:  https://fonts.google.com/icons
          * @example <ui-icon name="home"></ui-icon> <ui-icon name="settings"></ui-icon>
         */
        "name"?: string;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6'.
          * @default 'h1'
         */
        "variant"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-icon": UiIcon;
        "ui-logo": UiLogo;
        "ui-typography": UiTypography;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-logo": LocalJSX.UiLogo & JSXBase.HTMLAttributes<HTMLUiLogoElement>;
            "ui-typography": LocalJSX.UiTypography & JSXBase.HTMLAttributes<HTMLUiTypographyElement>;
        }
    }
}
