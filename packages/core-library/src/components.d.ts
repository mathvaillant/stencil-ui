/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UIIcon } from "./components/ui-icon/ui-icon";
import { IconName } from "./components/ui-icon/icons";
import { UIMenuItem } from "./components/ui-menu/ui-menu.types";
import { UISidebarItem } from "./components/ui-sidebar/ui-sidebar.types";
export { UIIcon } from "./components/ui-icon/ui-icon";
export { IconName } from "./components/ui-icon/icons";
export { UIMenuItem } from "./components/ui-menu/ui-menu.types";
export { UISidebarItem } from "./components/ui-sidebar/ui-sidebar.types";
export namespace Components {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled": boolean;
        /**
          * The name of the icon to render inside the button on the left side. If provided, the button will render an `ui-icon` icon.
         */
        "iconName"?: UIIcon['name'];
        /**
          * The type of the button. Can be 'button', 'submit', or 'reset'. Defaults to 'button'.
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiFieldset {
    }
    interface UiFieldsetOption {
        "checked"?: boolean;
        "label": string;
        "name": string;
        "required"?: boolean;
        /**
          * @default 'radio'
         */
        "type"?: 'radio' | 'checkbox';
        "value": string;
    }
    interface UiIcon {
        /**
          * The name of the icon to render.
         */
        "name": IconName;
    }
    interface UiInput {
        "autocomplete"?: string;
        "disabled"?: boolean;
        "fieldId"?: string;
        "name"?: string;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        /**
          * @default 'text'
         */
        "type"?: HTMLInputElement['type'];
        "value"?: string;
    }
    interface UiLabel {
        /**
          * @default 'label'
         */
        "as"?: 'p' | 'label' | 'legend';
        "htmlFor"?: string;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiMenu {
        /**
          * The menu items to display in the menu. Each item should conform to the UIMenuItem interface.
          * @type {UIMenuItem[]}
          * @default []
         */
        "data"?: UIMenuItem[];
        /**
          * Indicates whether the menu is open or closed.
          * @type {boolean}
          * @default false
         */
        "open": boolean;
        /**
          * Position relative to the viewport where the menu should be displayed.  If not provided, the menu will be positioned automatically based on the host element.
          * @type {{ x: number; y: number } | null}
          * @default null
         */
        "position"?: { x: number; y: number } | null;
    }
    interface UiModal {
        /**
          * Closes the modal dialog. This method is called to hide the modal when the `open` property is set to false. It uses the native `close` method of the HTMLDialogElement.
         */
        "closeModal": () => Promise<void>;
        /**
          * The name of the slot for the footer content. This allows for custom footer content to be passed into the modal.
          * @type {string}
          * @default 'footer-slot'
         */
        "footerSlotName"?: string;
        /**
          * The title of the modal header. This is displayed at the top of the modal.
          * @type {string}
          * @default undefined
         */
        "headerTitle"?: string;
        /**
          * Indicates whether the modal is open or closed.
          * @type {boolean}
          * @default false
         */
        "open": boolean;
        /**
          * Opens the modal dialog. This method is called to display the modal when the `open` property is set to true. It uses the native `showModal` method of the HTMLDialogElement.
         */
        "showModal": () => Promise<void>;
    }
    interface UiSelect {
        "fieldId"?: string;
        "name"?: string;
    }
    interface UiSidebar {
        /**
          * The items to display in the sidebar.
          * @type {UISidebarItem[]}
          * @default []
         */
        "items": UISidebarItem[];
        /**
          * Indicates whether the sidebar is open or closed.
          * @type {boolean}
          * @default false
         */
        "open": boolean;
    }
    interface UiTab {
        /**
          * the label of the tab, displayed in the tab list.
         */
        "label": string;
        /**
          * the value of the tab, used to identify it within the tab context. This should match the value of the corresponding `ui-tab-context` component.
         */
        "value": string;
    }
    interface UiTabContext {
        "value": string;
    }
    interface UiTabList {
    }
    interface UiTabPanel {
        /**
          * the value of the tab panel, used to identify it within the tab context. This should match the value of the corresponding `ui-tab` component.
         */
        "value": string;
    }
    interface UiTextarea {
        "disabled"?: boolean;
        "fieldId"?: string;
        "maxlength"?: number;
        "minlength"?: number;
        "name"?: string;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "rows"?: number;
        "value"?: string;
    }
    interface UiTooltip {
        /**
          * The text to display in the tooltip. This text will be shown when the user hovers over the component.
          * @example <ui-tooltip text="This is a tooltip!"></ui-tooltip>
         */
        "text": string;
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' or 'p'.
          * @default 'h1'
         */
        "variant": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
    }
    interface UiXstack {
    }
    interface UiYstack {
    }
}
export interface UiMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiMenuElement;
}
export interface UiModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiModalElement;
}
export interface UiTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTabElement;
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiFieldsetElement extends Components.UiFieldset, HTMLStencilElement {
    }
    var HTMLUiFieldsetElement: {
        prototype: HTMLUiFieldsetElement;
        new (): HTMLUiFieldsetElement;
    };
    interface HTMLUiFieldsetOptionElement extends Components.UiFieldsetOption, HTMLStencilElement {
    }
    var HTMLUiFieldsetOptionElement: {
        prototype: HTMLUiFieldsetOptionElement;
        new (): HTMLUiFieldsetOptionElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiLabelElement extends Components.UiLabel, HTMLStencilElement {
    }
    var HTMLUiLabelElement: {
        prototype: HTMLUiLabelElement;
        new (): HTMLUiLabelElement;
    };
    interface HTMLUiLogoElement extends Components.UiLogo, HTMLStencilElement {
    }
    var HTMLUiLogoElement: {
        prototype: HTMLUiLogoElement;
        new (): HTMLUiLogoElement;
    };
    interface HTMLUiMenuElementEventMap {
        "close": void;
    }
    interface HTMLUiMenuElement extends Components.UiMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiMenuElementEventMap>(type: K, listener: (this: HTMLUiMenuElement, ev: UiMenuCustomEvent<HTMLUiMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiMenuElementEventMap>(type: K, listener: (this: HTMLUiMenuElement, ev: UiMenuCustomEvent<HTMLUiMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiMenuElement: {
        prototype: HTMLUiMenuElement;
        new (): HTMLUiMenuElement;
    };
    interface HTMLUiModalElementEventMap {
        "close": void;
    }
    interface HTMLUiModalElement extends Components.UiModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiModalElementEventMap>(type: K, listener: (this: HTMLUiModalElement, ev: UiModalCustomEvent<HTMLUiModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiModalElementEventMap>(type: K, listener: (this: HTMLUiModalElement, ev: UiModalCustomEvent<HTMLUiModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiModalElement: {
        prototype: HTMLUiModalElement;
        new (): HTMLUiModalElement;
    };
    interface HTMLUiSelectElement extends Components.UiSelect, HTMLStencilElement {
    }
    var HTMLUiSelectElement: {
        prototype: HTMLUiSelectElement;
        new (): HTMLUiSelectElement;
    };
    interface HTMLUiSidebarElement extends Components.UiSidebar, HTMLStencilElement {
    }
    var HTMLUiSidebarElement: {
        prototype: HTMLUiSidebarElement;
        new (): HTMLUiSidebarElement;
    };
    interface HTMLUiTabElementEventMap {
        "tabChange": { value: string };
    }
    interface HTMLUiTabElement extends Components.UiTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTabElementEventMap>(type: K, listener: (this: HTMLUiTabElement, ev: UiTabCustomEvent<HTMLUiTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTabElementEventMap>(type: K, listener: (this: HTMLUiTabElement, ev: UiTabCustomEvent<HTMLUiTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTabElement: {
        prototype: HTMLUiTabElement;
        new (): HTMLUiTabElement;
    };
    interface HTMLUiTabContextElement extends Components.UiTabContext, HTMLStencilElement {
    }
    var HTMLUiTabContextElement: {
        prototype: HTMLUiTabContextElement;
        new (): HTMLUiTabContextElement;
    };
    interface HTMLUiTabListElement extends Components.UiTabList, HTMLStencilElement {
    }
    var HTMLUiTabListElement: {
        prototype: HTMLUiTabListElement;
        new (): HTMLUiTabListElement;
    };
    interface HTMLUiTabPanelElement extends Components.UiTabPanel, HTMLStencilElement {
    }
    var HTMLUiTabPanelElement: {
        prototype: HTMLUiTabPanelElement;
        new (): HTMLUiTabPanelElement;
    };
    interface HTMLUiTextareaElement extends Components.UiTextarea, HTMLStencilElement {
    }
    var HTMLUiTextareaElement: {
        prototype: HTMLUiTextareaElement;
        new (): HTMLUiTextareaElement;
    };
    interface HTMLUiTooltipElement extends Components.UiTooltip, HTMLStencilElement {
    }
    var HTMLUiTooltipElement: {
        prototype: HTMLUiTooltipElement;
        new (): HTMLUiTooltipElement;
    };
    interface HTMLUiTypographyElement extends Components.UiTypography, HTMLStencilElement {
    }
    var HTMLUiTypographyElement: {
        prototype: HTMLUiTypographyElement;
        new (): HTMLUiTypographyElement;
    };
    interface HTMLUiXstackElement extends Components.UiXstack, HTMLStencilElement {
    }
    var HTMLUiXstackElement: {
        prototype: HTMLUiXstackElement;
        new (): HTMLUiXstackElement;
    };
    interface HTMLUiYstackElement extends Components.UiYstack, HTMLStencilElement {
    }
    var HTMLUiYstackElement: {
        prototype: HTMLUiYstackElement;
        new (): HTMLUiYstackElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-fieldset": HTMLUiFieldsetElement;
        "ui-fieldset-option": HTMLUiFieldsetOptionElement;
        "ui-icon": HTMLUiIconElement;
        "ui-input": HTMLUiInputElement;
        "ui-label": HTMLUiLabelElement;
        "ui-logo": HTMLUiLogoElement;
        "ui-menu": HTMLUiMenuElement;
        "ui-modal": HTMLUiModalElement;
        "ui-select": HTMLUiSelectElement;
        "ui-sidebar": HTMLUiSidebarElement;
        "ui-tab": HTMLUiTabElement;
        "ui-tab-context": HTMLUiTabContextElement;
        "ui-tab-list": HTMLUiTabListElement;
        "ui-tab-panel": HTMLUiTabPanelElement;
        "ui-textarea": HTMLUiTextareaElement;
        "ui-tooltip": HTMLUiTooltipElement;
        "ui-typography": HTMLUiTypographyElement;
        "ui-xstack": HTMLUiXstackElement;
        "ui-ystack": HTMLUiYstackElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Whether the button is disabled. Defaults to false.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to render inside the button on the left side. If provided, the button will render an `ui-icon` icon.
         */
        "iconName"?: UIIcon['name'];
        /**
          * The type of the button. Can be 'button', 'submit', or 'reset'. Defaults to 'button'.
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The variant of the button. Can be 'primary', 'secondary', or 'tertiary'. Defaults to 'primary'.
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface UiFieldset {
    }
    interface UiFieldsetOption {
        "checked"?: boolean;
        "label": string;
        "name": string;
        "required"?: boolean;
        /**
          * @default 'radio'
         */
        "type"?: 'radio' | 'checkbox';
        "value": string;
    }
    interface UiIcon {
        /**
          * The name of the icon to render.
         */
        "name": IconName;
    }
    interface UiInput {
        "autocomplete"?: string;
        "disabled"?: boolean;
        "fieldId"?: string;
        "name"?: string;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        /**
          * @default 'text'
         */
        "type"?: HTMLInputElement['type'];
        "value"?: string;
    }
    interface UiLabel {
        /**
          * @default 'label'
         */
        "as"?: 'p' | 'label' | 'legend';
        "htmlFor"?: string;
    }
    interface UiLogo {
        /**
          * @default 100
         */
        "height"?: HTMLImageElement['height'];
        /**
          * @default 100
         */
        "width"?: HTMLImageElement['width'];
    }
    interface UiMenu {
        /**
          * The menu items to display in the menu. Each item should conform to the UIMenuItem interface.
          * @type {UIMenuItem[]}
          * @default []
         */
        "data"?: UIMenuItem[];
        /**
          * Event emitted when the menu is closed.
          * @event close
         */
        "onClose"?: (event: UiMenuCustomEvent<void>) => void;
        /**
          * Indicates whether the menu is open or closed.
          * @type {boolean}
          * @default false
         */
        "open"?: boolean;
        /**
          * Position relative to the viewport where the menu should be displayed.  If not provided, the menu will be positioned automatically based on the host element.
          * @type {{ x: number; y: number } | null}
          * @default null
         */
        "position"?: { x: number; y: number } | null;
    }
    interface UiModal {
        /**
          * The name of the slot for the footer content. This allows for custom footer content to be passed into the modal.
          * @type {string}
          * @default 'footer-slot'
         */
        "footerSlotName"?: string;
        /**
          * The title of the modal header. This is displayed at the top of the modal.
          * @type {string}
          * @default undefined
         */
        "headerTitle"?: string;
        /**
          * Event emitted when the modal is closed.
          * @event close
         */
        "onClose"?: (event: UiModalCustomEvent<void>) => void;
        /**
          * Indicates whether the modal is open or closed.
          * @type {boolean}
          * @default false
         */
        "open"?: boolean;
    }
    interface UiSelect {
        "fieldId"?: string;
        "name"?: string;
    }
    interface UiSidebar {
        /**
          * The items to display in the sidebar.
          * @type {UISidebarItem[]}
          * @default []
         */
        "items"?: UISidebarItem[];
        /**
          * Indicates whether the sidebar is open or closed.
          * @type {boolean}
          * @default false
         */
        "open"?: boolean;
    }
    interface UiTab {
        /**
          * the label of the tab, displayed in the tab list.
         */
        "label"?: string;
        "onTabChange"?: (event: UiTabCustomEvent<{ value: string }>) => void;
        /**
          * the value of the tab, used to identify it within the tab context. This should match the value of the corresponding `ui-tab-context` component.
         */
        "value"?: string;
    }
    interface UiTabContext {
        "value"?: string;
    }
    interface UiTabList {
    }
    interface UiTabPanel {
        /**
          * the value of the tab panel, used to identify it within the tab context. This should match the value of the corresponding `ui-tab` component.
         */
        "value"?: string;
    }
    interface UiTextarea {
        "disabled"?: boolean;
        "fieldId"?: string;
        "maxlength"?: number;
        "minlength"?: number;
        "name"?: string;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "rows"?: number;
        "value"?: string;
    }
    interface UiTooltip {
        /**
          * The text to display in the tooltip. This text will be shown when the user hovers over the component.
          * @example <ui-tooltip text="This is a tooltip!"></ui-tooltip>
         */
        "text": string;
    }
    interface UiTypography {
        /**
          * The variant of the typography element. Can be one of 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' or 'p'.
          * @default 'h1'
         */
        "variant"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
    }
    interface UiXstack {
    }
    interface UiYstack {
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-fieldset": UiFieldset;
        "ui-fieldset-option": UiFieldsetOption;
        "ui-icon": UiIcon;
        "ui-input": UiInput;
        "ui-label": UiLabel;
        "ui-logo": UiLogo;
        "ui-menu": UiMenu;
        "ui-modal": UiModal;
        "ui-select": UiSelect;
        "ui-sidebar": UiSidebar;
        "ui-tab": UiTab;
        "ui-tab-context": UiTabContext;
        "ui-tab-list": UiTabList;
        "ui-tab-panel": UiTabPanel;
        "ui-textarea": UiTextarea;
        "ui-tooltip": UiTooltip;
        "ui-typography": UiTypography;
        "ui-xstack": UiXstack;
        "ui-ystack": UiYstack;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-fieldset": LocalJSX.UiFieldset & JSXBase.HTMLAttributes<HTMLUiFieldsetElement>;
            "ui-fieldset-option": LocalJSX.UiFieldsetOption & JSXBase.HTMLAttributes<HTMLUiFieldsetOptionElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-label": LocalJSX.UiLabel & JSXBase.HTMLAttributes<HTMLUiLabelElement>;
            "ui-logo": LocalJSX.UiLogo & JSXBase.HTMLAttributes<HTMLUiLogoElement>;
            "ui-menu": LocalJSX.UiMenu & JSXBase.HTMLAttributes<HTMLUiMenuElement>;
            "ui-modal": LocalJSX.UiModal & JSXBase.HTMLAttributes<HTMLUiModalElement>;
            "ui-select": LocalJSX.UiSelect & JSXBase.HTMLAttributes<HTMLUiSelectElement>;
            "ui-sidebar": LocalJSX.UiSidebar & JSXBase.HTMLAttributes<HTMLUiSidebarElement>;
            "ui-tab": LocalJSX.UiTab & JSXBase.HTMLAttributes<HTMLUiTabElement>;
            "ui-tab-context": LocalJSX.UiTabContext & JSXBase.HTMLAttributes<HTMLUiTabContextElement>;
            "ui-tab-list": LocalJSX.UiTabList & JSXBase.HTMLAttributes<HTMLUiTabListElement>;
            "ui-tab-panel": LocalJSX.UiTabPanel & JSXBase.HTMLAttributes<HTMLUiTabPanelElement>;
            "ui-textarea": LocalJSX.UiTextarea & JSXBase.HTMLAttributes<HTMLUiTextareaElement>;
            "ui-tooltip": LocalJSX.UiTooltip & JSXBase.HTMLAttributes<HTMLUiTooltipElement>;
            "ui-typography": LocalJSX.UiTypography & JSXBase.HTMLAttributes<HTMLUiTypographyElement>;
            "ui-xstack": LocalJSX.UiXstack & JSXBase.HTMLAttributes<HTMLUiXstackElement>;
            "ui-ystack": LocalJSX.UiYstack & JSXBase.HTMLAttributes<HTMLUiYstackElement>;
        }
    }
}
